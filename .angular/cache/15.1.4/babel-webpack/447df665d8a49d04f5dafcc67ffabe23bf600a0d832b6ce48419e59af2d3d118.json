{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport { BarChart, LineChart, PieChart } from 'chartist';\n\n/**\n * Angular component which renders Chartist chart.\n *\n * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and\n * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.\n * ### Example\n ```html\n <x-chartist\n   [configuration]=\"configuration\"\n   [events]=\"events\"\n ></x-chartist>\n ```\n */\nlet ChartistComponent = /*#__PURE__*/(() => {\n  class ChartistComponent {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      /**\n       * Event emitted after Chartist chart has been initialized.\n       *\n       * Event handler function will receive chart instance argument.\n       */\n      this.initialized = new EventEmitter();\n    }\n    ngOnInit() {\n      if (this.configuration.type && this.configuration.data) {\n        this.renderChart();\n      }\n    }\n    ngOnChanges(changes) {\n      this.update(changes);\n    }\n    ngOnDestroy() {\n      if (this.chart) {\n        this.chart.detach();\n        this.chart = null;\n      }\n    }\n    renderChart() {\n      const nativeElement = this.elementRef.nativeElement;\n      const {\n        type,\n        data,\n        options,\n        responsiveOptions\n      } = this.configuration;\n      if (type === \"Bar\") {\n        this.chart = new BarChart(nativeElement, data, options, responsiveOptions);\n      } else if (type === \"Line\") {\n        this.chart = new LineChart(nativeElement, data, options, responsiveOptions);\n      } else if (type === \"Pie\") {\n        this.chart = new PieChart(nativeElement, data, options, responsiveOptions);\n      } else {\n        throw new Error(`${type} is not a known chart type`);\n      }\n      if (this.events) {\n        this.bindEvents();\n      }\n      this.initialized.emit(this.chart);\n    }\n    update(changes) {\n      const {\n        type,\n        data,\n        options\n      } = this.configuration;\n      if (!type || !data) {\n        return;\n      }\n      const changedConfiguration = changes.configuration.currentValue;\n      if (!this.chart || changedConfiguration.type !== type) {\n        this.renderChart();\n      } else if (\"data\" in changedConfiguration || \"options\" in changedConfiguration) {\n        this.chart.update(data, options);\n      }\n    }\n    bindEvents() {\n      for (const event of Object.keys(this.events)) {\n        this.chart.on(event, this.events[event]);\n      }\n    }\n  }\n  ChartistComponent.ɵfac = function ChartistComponent_Factory(t) {\n    return new (t || ChartistComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  ChartistComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ChartistComponent,\n    selectors: [[\"x-chartist\"]],\n    inputs: {\n      configuration: \"configuration\",\n      events: \"events\"\n    },\n    outputs: {\n      initialized: \"initialized\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function ChartistComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%]{display:block}\"]\n  });\n  return ChartistComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ChartistModule = /*#__PURE__*/(() => {\n  class ChartistModule {}\n  ChartistModule.ɵfac = function ChartistModule_Factory(t) {\n    return new (t || ChartistModule)();\n  };\n  ChartistModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ChartistModule\n  });\n  ChartistModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return ChartistModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ng-chartist-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartistComponent, ChartistModule };\n//# sourceMappingURL=ng-chartist.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}