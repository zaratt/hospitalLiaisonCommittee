{"ast":null,"code":"import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { isDevMode, InjectionToken, SecurityContext, Injectable, Optional, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { generate } from '@ant-design/colors';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject, of, Observable } from 'rxjs';\nimport { map, tap, finalize, catchError, share, filter, take } from 'rxjs/operators';\nimport * as i2 from '@angular/platform-browser';\nconst ANT_ICON_ANGULAR_CONSOLE_PREFIX = '[@ant-design/icons-angular]:';\nfunction error(message) {\n  console.error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX} ${message}.`);\n}\nfunction warn(message) {\n  if (isDevMode()) {\n    console.warn(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX} ${message}.`);\n  }\n}\nfunction getSecondaryColor(primaryColor) {\n  return generate(primaryColor)[0];\n}\nfunction withSuffix(name, theme) {\n  switch (theme) {\n    case 'fill':\n      return `${name}-fill`;\n    case 'outline':\n      return `${name}-o`;\n    case 'twotone':\n      return `${name}-twotone`;\n    case undefined:\n      return name;\n    default:\n      throw new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}Theme \"${theme}\" is not a recognized theme!`);\n  }\n}\nfunction withSuffixAndColor(name, theme, pri, sec) {\n  return `${withSuffix(name, theme)}-${pri}-${sec}`;\n}\nfunction mapAbbrToTheme(abbr) {\n  return abbr === 'o' ? 'outline' : abbr;\n}\nfunction alreadyHasAThemeSuffix(name) {\n  return name.endsWith('-fill') || name.endsWith('-o') || name.endsWith('-twotone');\n}\nfunction isIconDefinition(target) {\n  return typeof target === 'object' && typeof target.name === 'string' && (typeof target.theme === 'string' || target.theme === undefined) && typeof target.icon === 'string';\n}\n/**\n * Get an `IconDefinition` object from abbreviation type, like `account-book-fill`.\n * @param str\n */\nfunction getIconDefinitionFromAbbr(str) {\n  const arr = str.split('-');\n  const theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);\n  const name = arr.join('-');\n  return {\n    name,\n    theme,\n    icon: ''\n  };\n}\nfunction cloneSVG(svg) {\n  return svg.cloneNode(true);\n}\n/**\n * Parse inline SVG string and replace colors with placeholders. For twotone icons only.\n */\nfunction replaceFillColor(raw) {\n  return raw.replace(/['\"]#333['\"]/g, '\"primaryColor\"').replace(/['\"]#E6E6E6['\"]/g, '\"secondaryColor\"').replace(/['\"]#D9D9D9['\"]/g, '\"secondaryColor\"').replace(/['\"]#D8D8D8['\"]/g, '\"secondaryColor\"');\n}\n/**\n * Split a name with namespace in it into a tuple like [ name, namespace ].\n */\nfunction getNameAndNamespace(type) {\n  const split = type.split(':');\n  switch (split.length) {\n    case 1:\n      return [type, ''];\n    case 2:\n      return [split[1], split[0]];\n    default:\n      throw new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}The icon type ${type} is not valid!`);\n  }\n}\nfunction hasNamespace(type) {\n  return getNameAndNamespace(type)[1] !== '';\n}\nfunction NameSpaceIsNotSpecifyError() {\n  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}Type should have a namespace. Try \"namespace:${name}\".`);\n}\nfunction IconNotFoundError(icon) {\n  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}the icon ${icon} does not exist or is not registered.`);\n}\nfunction HttpModuleNotImport() {\n  error(`you need to import \"HttpClientModule\" to use dynamic importing.`);\n  return null;\n}\nfunction UrlNotSafeError(url) {\n  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}The url \"${url}\" is unsafe.`);\n}\nfunction SVGTagNotFoundError() {\n  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}<svg> tag not found.`);\n}\nfunction DynamicLoadingTimeoutError() {\n  return new Error(`${ANT_ICON_ANGULAR_CONSOLE_PREFIX}Importing timeout error.`);\n}\nconst JSONP_HANDLER_NAME = '__ant_icon_load';\nconst ANT_ICONS = new InjectionToken('ant_icons');\nlet IconService = /*#__PURE__*/(() => {\n  class IconService {\n    constructor(_rendererFactory, _handler,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _document, sanitizer, _antIcons) {\n      this._rendererFactory = _rendererFactory;\n      this._handler = _handler;\n      this._document = _document;\n      this.sanitizer = sanitizer;\n      this._antIcons = _antIcons;\n      this.defaultTheme = 'outline';\n      /**\n       * All icon definitions would be registered here.\n       */\n      this._svgDefinitions = new Map();\n      /**\n       * Cache all rendered icons. Icons are identified by name, theme,\n       * and for twotone icons, primary color and secondary color.\n       */\n      this._svgRenderedDefinitions = new Map();\n      this._inProgressFetches = new Map();\n      /**\n       * Url prefix for fetching inline SVG by dynamic importing.\n       */\n      this._assetsUrlRoot = '';\n      this._twoToneColorPalette = {\n        primaryColor: '#333333',\n        secondaryColor: '#E6E6E6'\n      };\n      /** A flag indicates whether jsonp loading is enabled. */\n      this._enableJsonpLoading = false;\n      this._jsonpIconLoad$ = new Subject();\n      this._renderer = this._rendererFactory.createRenderer(null, null);\n      if (this._handler) {\n        this._http = new HttpClient(this._handler);\n      }\n      if (this._antIcons) {\n        this.addIcon(...this._antIcons);\n      }\n    }\n    set twoToneColor({\n      primaryColor,\n      secondaryColor\n    }) {\n      this._twoToneColorPalette.primaryColor = primaryColor;\n      this._twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);\n    }\n    get twoToneColor() {\n      // Make a copy to avoid unexpected changes.\n      return {\n        ...this._twoToneColorPalette\n      };\n    }\n    /**\n     * Disable dynamic loading (support static loading only).\n     */\n    get _disableDynamicLoading() {\n      return false;\n    }\n    /**\n     * Call this method to switch to jsonp like loading.\n     */\n    useJsonpLoading() {\n      if (!this._enableJsonpLoading) {\n        this._enableJsonpLoading = true;\n        window[JSONP_HANDLER_NAME] = icon => {\n          this._jsonpIconLoad$.next(icon);\n        };\n      } else {\n        warn('You are already using jsonp loading.');\n      }\n    }\n    /**\n     * Change the prefix of the inline svg resources, so they could be deployed elsewhere, like CDN.\n     * @param prefix\n     */\n    changeAssetsSource(prefix) {\n      this._assetsUrlRoot = prefix.endsWith('/') ? prefix : prefix + '/';\n    }\n    /**\n     * Add icons provided by ant design.\n     * @param icons\n     */\n    addIcon(...icons) {\n      icons.forEach(icon => {\n        this._svgDefinitions.set(withSuffix(icon.name, icon.theme), icon);\n      });\n    }\n    /**\n     * Register an icon. Namespace is required.\n     * @param type\n     * @param literal\n     */\n    addIconLiteral(type, literal) {\n      const [_, namespace] = getNameAndNamespace(type);\n      if (!namespace) {\n        throw NameSpaceIsNotSpecifyError();\n      }\n      this.addIcon({\n        name: type,\n        icon: literal\n      });\n    }\n    /**\n     * Remove all cache.\n     */\n    clear() {\n      this._svgDefinitions.clear();\n      this._svgRenderedDefinitions.clear();\n    }\n    /**\n     * Get a rendered `SVGElement`.\n     * @param icon\n     * @param twoToneColor\n     */\n    getRenderedContent(icon, twoToneColor) {\n      // If `icon` is a `IconDefinition`, go to the next step. If not, try to fetch it from cache.\n      const definition = isIconDefinition(icon) ? icon : this._svgDefinitions.get(icon) || null;\n      if (!definition && this._disableDynamicLoading) {\n        throw IconNotFoundError(icon);\n      }\n      // If `icon` is a `IconDefinition` of successfully fetch, wrap it in an `Observable`.\n      // Otherwise try to fetch it from remote.\n      const $iconDefinition = definition ? of(definition) : this._loadIconDynamically(icon);\n      // If finally get an `IconDefinition`, render and return it. Otherwise throw an error.\n      return $iconDefinition.pipe(map(i => {\n        if (!i) {\n          throw IconNotFoundError(icon);\n        }\n        return this._loadSVGFromCacheOrCreateNew(i, twoToneColor);\n      }));\n    }\n    getCachedIcons() {\n      return this._svgDefinitions;\n    }\n    /**\n     * Get raw svg and assemble a `IconDefinition` object.\n     * @param type\n     */\n    _loadIconDynamically(type) {\n      // If developer doesn't provide HTTP module nor enable jsonp loading, just throw an error.\n      if (!this._http && !this._enableJsonpLoading) {\n        return of(HttpModuleNotImport());\n      }\n      // If multi directive ask for the same icon at the same time,\n      // request should only be fired once.\n      let inProgress = this._inProgressFetches.get(type);\n      if (!inProgress) {\n        const [name, namespace] = getNameAndNamespace(type);\n        // If the string has a namespace within, create a simple `IconDefinition`.\n        const icon = namespace ? {\n          name: type,\n          icon: ''\n        } : getIconDefinitionFromAbbr(name);\n        const suffix = this._enableJsonpLoading ? '.js' : '.svg';\n        const url = (namespace ? `${this._assetsUrlRoot}assets/${namespace}/${name}` : `${this._assetsUrlRoot}assets/${icon.theme}/${icon.name}`) + suffix;\n        const safeUrl = this.sanitizer.sanitize(SecurityContext.URL, url);\n        if (!safeUrl) {\n          throw UrlNotSafeError(url);\n        }\n        const source = !this._enableJsonpLoading ? this._http.get(safeUrl, {\n          responseType: 'text'\n        }).pipe(map(literal => ({\n          ...icon,\n          icon: literal\n        }))) : this._loadIconDynamicallyWithJsonp(icon, safeUrl);\n        inProgress = source.pipe(tap(definition => this.addIcon(definition)), finalize(() => this._inProgressFetches.delete(type)), catchError(() => of(null)), share());\n        this._inProgressFetches.set(type, inProgress);\n      }\n      return inProgress;\n    }\n    _loadIconDynamicallyWithJsonp(icon, url) {\n      return new Observable(subscriber => {\n        const loader = this._document.createElement('script');\n        const timer = setTimeout(() => {\n          clean();\n          subscriber.error(DynamicLoadingTimeoutError());\n        }, 6000);\n        loader.src = url;\n        function clean() {\n          loader.parentNode.removeChild(loader);\n          clearTimeout(timer);\n        }\n        this._document.body.appendChild(loader);\n        this._jsonpIconLoad$.pipe(filter(i => i.name === icon.name && i.theme === icon.theme), take(1)).subscribe(i => {\n          subscriber.next(i);\n          clean();\n        });\n      });\n    }\n    /**\n     * Render a new `SVGElement` for a given `IconDefinition`, or make a copy from cache.\n     * @param icon\n     * @param twoToneColor\n     */\n    _loadSVGFromCacheOrCreateNew(icon, twoToneColor) {\n      let svg;\n      const pri = twoToneColor || this._twoToneColorPalette.primaryColor;\n      const sec = getSecondaryColor(pri) || this._twoToneColorPalette.secondaryColor;\n      const key = icon.theme === 'twotone' ? withSuffixAndColor(icon.name, icon.theme, pri, sec) : icon.theme === undefined ? icon.name : withSuffix(icon.name, icon.theme);\n      // Try to make a copy from cache.\n      const cached = this._svgRenderedDefinitions.get(key);\n      if (cached) {\n        svg = cached.icon;\n      } else {\n        svg = this._setSVGAttribute(this._colorizeSVGIcon(\n        // Icons provided by ant design should be refined to remove preset colors.\n        this._createSVGElementFromString(hasNamespace(icon.name) ? icon.icon : replaceFillColor(icon.icon)), icon.theme === 'twotone', pri, sec));\n        // Cache it.\n        this._svgRenderedDefinitions.set(key, {\n          ...icon,\n          icon: svg\n        });\n      }\n      return cloneSVG(svg);\n    }\n    _createSVGElementFromString(str) {\n      const div = this._document.createElement('div');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg');\n      if (!svg) {\n        throw SVGTagNotFoundError;\n      }\n      return svg;\n    }\n    _setSVGAttribute(svg) {\n      this._renderer.setAttribute(svg, 'width', '1em');\n      this._renderer.setAttribute(svg, 'height', '1em');\n      return svg;\n    }\n    _colorizeSVGIcon(svg, twotone, pri, sec) {\n      if (twotone) {\n        const children = svg.childNodes;\n        const length = children.length;\n        for (let i = 0; i < length; i++) {\n          const child = children[i];\n          if (child.getAttribute('fill') === 'secondaryColor') {\n            this._renderer.setAttribute(child, 'fill', sec);\n          } else {\n            this._renderer.setAttribute(child, 'fill', pri);\n          }\n        }\n      }\n      this._renderer.setAttribute(svg, 'fill', 'currentColor');\n      return svg;\n    }\n  }\n  IconService.ɵfac = function IconService_Factory(t) {\n    return new (t || IconService)(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i1.HttpBackend, 8), i0.ɵɵinject(DOCUMENT, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(ANT_ICONS, 8));\n  };\n  IconService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: IconService,\n    factory: IconService.ɵfac\n  });\n  return IconService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction checkMeta(prev, after) {\n  return prev.type === after.type && prev.theme === after.theme && prev.twoToneColor === after.twoToneColor;\n}\nlet IconDirective = /*#__PURE__*/(() => {\n  class IconDirective {\n    constructor(_iconService, _elementRef, _renderer) {\n      this._iconService = _iconService;\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n    }\n    ngOnChanges(changes) {\n      if (changes.type || changes.theme || changes.twoToneColor) {\n        this._changeIcon();\n      }\n    }\n    /**\n     * Render a new icon in the current element. Remove the icon when `type` is falsy.\n     */\n    _changeIcon() {\n      return new Promise(resolve => {\n        if (!this.type) {\n          this._clearSVGElement();\n          resolve(null);\n          return;\n        }\n        const beforeMeta = this._getSelfRenderMeta();\n        this._iconService.getRenderedContent(this._parseIconType(this.type, this.theme), this.twoToneColor).subscribe(svg => {\n          // avoid race condition\n          // see https://github.com/ant-design/ant-design-icons/issues/315\n          const afterMeta = this._getSelfRenderMeta();\n          if (checkMeta(beforeMeta, afterMeta)) {\n            this._setSVGElement(svg);\n            resolve(svg);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    }\n    _getSelfRenderMeta() {\n      return {\n        type: this.type,\n        theme: this.theme,\n        twoToneColor: this.twoToneColor\n      };\n    }\n    /**\n     * Parse a icon to the standard form, an `IconDefinition` or a string like 'account-book-fill` (with a theme suffixed).\n     * If namespace is specified, ignore theme because it meaningless for users' icons.\n     *\n     * @param type\n     * @param theme\n     */\n    _parseIconType(type, theme) {\n      if (isIconDefinition(type)) {\n        return type;\n      } else {\n        const [name, namespace] = getNameAndNamespace(type);\n        if (namespace) {\n          return type;\n        }\n        if (alreadyHasAThemeSuffix(name)) {\n          if (!!theme) {\n            warn(`'type' ${name} already gets a theme inside so 'theme' ${theme} would be ignored`);\n          }\n          return name;\n        } else {\n          return withSuffix(name, theme || this._iconService.defaultTheme);\n        }\n      }\n    }\n    _setSVGElement(svg) {\n      this._clearSVGElement();\n      this._renderer.appendChild(this._elementRef.nativeElement, svg);\n    }\n    _clearSVGElement() {\n      const el = this._elementRef.nativeElement;\n      const children = el.childNodes;\n      const length = children.length;\n      for (let i = length - 1; i >= 0; i--) {\n        const child = children[i];\n        if (child.tagName?.toLowerCase() === 'svg') {\n          this._renderer.removeChild(el, child);\n        }\n      }\n    }\n  }\n  IconDirective.ɵfac = function IconDirective_Factory(t) {\n    return new (t || IconDirective)(i0.ɵɵdirectiveInject(IconService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  IconDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: IconDirective,\n    selectors: [[\"\", \"antIcon\", \"\"]],\n    inputs: {\n      type: \"type\",\n      theme: \"theme\",\n      twoToneColor: \"twoToneColor\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return IconDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet IconModule = /*#__PURE__*/(() => {\n  class IconModule {}\n  IconModule.ɵfac = function IconModule_Factory(t) {\n    return new (t || IconModule)();\n  };\n  IconModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: IconModule\n  });\n  IconModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [IconService],\n    imports: [CommonModule]\n  });\n  return IconModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst manifest = {\n  fill: ['alert', 'account-book', 'alipay-circle', 'alipay-square', 'android', 'amazon-circle', 'appstore', 'amazon-square', 'api', 'backward', 'audio', 'behance-circle', 'behance-square', 'bank', 'book', 'aliwangwang', 'bell', 'bug', 'box-plot', 'build', 'bulb', 'calculator', 'calendar', 'camera', 'car', 'caret-down', 'caret-up', 'caret-left', 'caret-right', 'check-circle', 'chrome', 'ci-circle', 'clock-circle', 'check-square', 'close-circle', 'carry-out', 'cloud', 'code', 'close-square', 'codepen-circle', 'codepen-square', 'contacts', 'apple', 'compass', 'container', 'code-sandbox-square', 'copyright-circle', 'code-sandbox-circle', 'credit-card', 'copy', 'dashboard', 'database', 'customer-service', 'control', 'diff', 'crown', 'dingtalk-square', 'delete', 'dollar-circle', 'down-square', 'down-circle', 'dribbble-square', 'dribbble-circle', 'dropbox-circle', 'dingtalk-circle', 'dislike', 'environment', 'dropbox-square', 'edit', 'euro-circle', 'exclamation-circle', 'eye', 'facebook', 'eye-invisible', 'experiment', 'fast-forward', 'file-exclamation', 'file-add', 'file', 'file-excel', 'file-markdown', 'fast-backward', 'file-pdf', 'file-image', 'file-text', 'file-ppt', 'file-unknown', 'file-word', 'fire', 'flag', 'filter', 'folder', 'folder-open', 'folder-add', 'forward', 'format-painter', 'frown', 'fund', 'gift', 'file-zip', 'gitlab', 'github', 'golden', 'google-square', 'google-circle', 'hdd', 'google-plus-circle', 'heart', 'gold', 'highlight', 'home', 'hourglass', 'google-plus-square', 'idcard', 'ie-square', 'ie-circle', 'info-circle', 'html5', 'instagram', 'insurance', 'layout', 'left-circle', 'interaction', 'like', 'left-square', 'linkedin', 'lock', 'mac-command', 'mail', 'medicine-box', 'message', 'meh', 'medium-square', 'minus-circle', 'medium-circle', 'money-collect', 'minus-square', 'mobile', 'notification', 'funnel-plot', 'pause-circle', 'phone', 'pay-circle', 'pie-chart', 'play-circle', 'play-square', 'pound-circle', 'plus-circle', 'printer', 'picture', 'profile', 'property-safety', 'pushpin', 'qq-square', 'qq-circle', 'project', 'plus-square', 'red-envelope', 'reddit-circle', 'question-circle', 'reddit-square', 'reconciliation', 'right-circle', 'right-square', 'robot', 'read', 'rocket', 'safety-certificate', 'rest', 'security-scan', 'shopping', 'setting', 'shop', 'sketch-circle', 'signal', 'skype', 'skin', 'slack-circle', 'sketch-square', 'sliders', 'smile', 'slack-square', 'save', 'sound', 'stop', 'star', 'step-forward', 'step-backward', 'tablet', 'snippets', 'tag', 'switcher', 'tags', 'taobao-circle', 'thunderbolt', 'tool', 'twitter-circle', 'trophy', 'trademark-circle', 'taobao-square', 'twitter-square', 'up-circle', 'up-square', 'unlock', 'usb', 'video-camera', 'wallet', 'warning', 'wechat', 'weibo-circle', 'weibo-square', 'windows', 'yahoo', 'yuque', 'zhihu-square', 'zhihu-circle', 'schedule', 'youtube'],\n  outline: ['alert', 'aim', 'alibaba', 'account-book', 'alipay-circle', 'alipay', 'amazon', 'aliwangwang', 'apartment', 'android', 'api', 'align-left', 'ant-design', 'apple', 'appstore', 'appstore-add', 'arrow-down', 'arrow-right', 'arrow-up', 'arrows-alt', 'area-chart', 'arrow-left', 'aliyun', 'ant-cloud', 'bar-chart', 'barcode', 'bank', 'bars', 'behance', 'bell', 'behance-square', 'audio', 'block', 'border-inner', 'bg-colors', 'border', 'border-outer', 'border-right', 'border-top', 'border-verticle', 'borderless-table', 'book', 'build', 'border-left', 'bug', 'box-plot', 'bulb', 'branches', 'calendar', 'camera', 'car', 'border-bottom', 'calculator', 'caret-down', 'caret-right', 'caret-left', 'carry-out', 'align-center', 'check', 'check-square', 'border-horizontal', 'chrome', 'check-circle', 'align-right', 'ci', 'clear', 'ci-circle', 'close-circle', 'clock-circle', 'cloud-server', 'cloud', 'cloud-sync', 'cloud-download', 'code', 'cloud-upload', 'coffee', 'codepen', 'column-height', 'comment', 'code-sandbox', 'bold', 'close-square', 'compress', 'codepen-circle', 'console-sql', 'caret-up', 'compass', 'close', 'container', 'cluster', 'control', 'contacts', 'copy', 'copyright-circle', 'copyright', 'customer-service', 'crown', 'backward', 'database', 'credit-card', 'delete-column', 'dash', 'dashboard', 'delivered-procedure', 'diff', 'dingding', 'delete', 'desktop', 'disconnect', 'delete-row', 'dislike', 'dollar-circle', 'double-left', 'double-right', 'dot-chart', 'down', 'down-square', 'dingtalk', 'dribbble', 'download', 'dropbox', 'dribbble-square', 'enter', 'edit', 'drag', 'euro', 'exception', 'expand-alt', 'experiment', 'exclamation-circle', 'expand', 'export', 'eye', 'environment', 'fall', 'deployment-unit', 'eye-invisible', 'exclamation', 'fast-forward', 'field-time', 'fast-backward', 'field-binary', 'euro-circle', 'field-string', 'file-done', 'ellipsis', 'file-excel', 'file-add', 'audit', 'file-gif', 'file', 'file-exclamation', 'field-number', 'facebook', 'file-search', 'file-sync', 'file-text', 'file-image', 'file-unknown', 'file-pdf', 'file-jpg', 'file-markdown', 'column-width', 'file-ppt', 'filter', 'file-word', 'flag', 'dollar', 'file-protect', 'folder', 'folder-open', 'fork', 'folder-add', 'form', 'font-colors', 'frown', 'font-size', 'fullscreen-exit', 'forward', 'fullscreen', 'function', 'gateway', 'gif', 'gift', 'funnel-plot', 'fund-view', 'folder-view', 'fund-projection-screen', 'gitlab', 'gold', 'global', 'google-plus', 'google', 'group', 'heart', 'audio-muted', 'down-circle', 'format-painter', 'history', 'highlight', 'hdd', 'home', 'holder', 'html5', 'idcard', 'import', 'hourglass', 'info', 'ie', 'insert-row-below', 'insert-row-left', 'insert-row-right', 'interaction', 'instagram', 'italic', 'insurance', 'info-circle', 'inbox', 'issues-close', 'left', 'key', 'laptop', 'line-chart', 'link', 'line', 'linkedin', 'line-height', 'like', 'loading-3-quarters', 'file-zip', 'layout', 'left-circle', 'insert-row-above', 'mac-command', 'man', 'medicine-box', 'left-square', 'lock', 'medium-workmark', 'logout', 'mail', 'menu-fold', 'merge-cells', 'medium', 'message', 'meh', 'menu-unfold', 'minus-square', 'minus-circle', 'money-collect', 'mobile', 'node-expand', 'minus', 'menu', 'node-index', 'node-collapse', 'notification', 'ordered-list', 'paper-clip', 'partition', 'pause-circle', 'loading', 'one-to-one', 'pay-circle', 'number', 'more', 'picture', 'pic-left', 'pie-chart', 'monitor', 'pause', 'percentage', 'phone', 'fund', 'pic-center', 'pic-right', 'play-square', 'play-circle', 'pound-circle', 'plus', 'plus-square', 'pound', 'plus-circle', 'profile', 'property-safety', 'printer', 'pushpin', 'poweroff', 'qrcode', 'pull-request', 'radius-bottomright', 'qq', 'radius-bottomleft', 'radius-upright', 'radius-upleft', 'question-circle', 'radius-setting', 'project', 'reconciliation', 'reddit', 'reload', 'rest', 'redo', 'right-circle', 'fire', 'read', 'right', 'radar-chart', 'right-square', 'question', 'rollback', 'red-envelope', 'rise', 'robot', 'heat-map', 'rotate-right', 'safety-certificate', 'safety', 'rocket', 'rotate-left', 'retweet', 'select', 'scissor', 'save', 'schedule', 'security-scan', 'search', 'shopping-cart', 'send', 'scan', 'shopping', 'shake', 'share-alt', 'skype', 'skin', 'sisternode', 'setting', 'sketch', 'shop', 'shrink', 'slack-square', 'snippets', 'solution', 'smile', 'slack', 'sliders', 'small-dash', 'sort-descending', 'sort-ascending', 'sound', 'step-backward', 'step-forward', 'stock', 'stop', 'star', 'swap-left', 'swap-right', 'split-cells', 'strikethrough', 'tablet', 'switcher', 'tag', 'swap', 'tags', 'subnode', 'sync', 'taobao-circle', 'taobao', 'team', 'table', 'thunderbolt', 'trademark-circle', 'trademark', 'transaction', 'trophy', 'undo', 'tool', 'underline', 'ungroup', 'unordered-list', 'twitter', 'unlock', 'up-square', 'up', 'upload', 'user-delete', 'to-top', 'usb', 'user', 'vertical-align-bottom', 'usergroup-add', 'user-switch', 'verified', 'up-circle', 'user-add', 'usergroup-delete', 'video-camera-add', 'vertical-right', 'vertical-align-middle', 'wallet', 'warning', 'vertical-align-top', 'wechat', 'weibo-circle', 'weibo', 'video-camera', 'vertical-left', 'weibo-square', 'windows', 'woman', 'whats-app', 'wifi', 'youtube', 'yuque', 'zoom-in', 'zhihu', 'yahoo', 'github', 'translation', 'login', 'zoom-out'],\n  twotone: ['api', 'appstore', 'audio', 'bank', 'bell', 'account-book', 'book', 'alert', 'box-plot', 'bug', 'bulb', 'build', 'calculator', 'camera', 'calendar', 'car', 'check-square', 'check-circle', 'ci', 'clock-circle', 'close-square', 'close-circle', 'ci-circle', 'carry-out', 'cloud', 'compass', 'code', 'contacts', 'control', 'copy', 'copyright-circle', 'credit-card', 'container', 'copyright', 'customer-service', 'dashboard', 'crown', 'diff', 'database', 'dislike', 'dollar', 'down-circle', 'down-square', 'edit', 'delete', 'environment', 'euro-circle', 'exclamation-circle', 'euro', 'experiment', 'eye-invisible', 'file-add', 'eye', 'file-markdown', 'file-pdf', 'file-text', 'file-excel', 'file-word', 'file-ppt', 'file', 'file-zip', 'fire', 'file-unknown', 'file-image', 'folder-add', 'flag', 'folder', 'filter', 'folder-open', 'frown', 'funnel-plot', 'gift', 'gold', 'hdd', 'heart', 'highlight', 'html5', 'home', 'idcard', 'hourglass', 'fund', 'info-circle', 'insurance', 'interaction', 'layout', 'left-circle', 'left-square', 'lock', 'like', 'mail', 'medicine-box', 'meh', 'message', 'mobile', 'minus-circle', 'money-collect', 'notification', 'minus-square', 'phone', 'picture', 'pie-chart', 'plus-square', 'play-circle', 'play-square', 'pause-circle', 'pound-circle', 'printer', 'plus-circle', 'file-exclamation', 'pushpin', 'property-safety', 'profile', 'reconciliation', 'right-circle', 'red-envelope', 'right-square', 'rocket', 'question-circle', 'safety-certificate', 'save', 'schedule', 'rest', 'security-scan', 'shop', 'setting', 'shopping', 'skin', 'sliders', 'smile', 'project', 'snippets', 'sound', 'star', 'stop', 'tag', 'switcher', 'tool', 'thunderbolt', 'trademark-circle', 'trophy', 'unlock', 'dollar-circle', 'up-square', 'usb', 'up-circle', 'video-camera', 'warning', 'tags', 'wallet', 'tablet']\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ANT_ICONS, ANT_ICON_ANGULAR_CONSOLE_PREFIX, DynamicLoadingTimeoutError, HttpModuleNotImport, IconDirective, IconModule, IconNotFoundError, IconService, NameSpaceIsNotSpecifyError, SVGTagNotFoundError, UrlNotSafeError, alreadyHasAThemeSuffix, cloneSVG, error, getIconDefinitionFromAbbr, getNameAndNamespace, getSecondaryColor, hasNamespace, isIconDefinition, manifest, mapAbbrToTheme, replaceFillColor, warn, withSuffix, withSuffixAndColor };\n//# sourceMappingURL=ant-design-icons-angular.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}